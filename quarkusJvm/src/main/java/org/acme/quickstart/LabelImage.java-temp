package org.acme.quickstart;

import com.google.common.io.ByteStreams;
import org.tensorflow.Graph;
import org.tensorflow.Session;
import org.tensorflow.Tensor;
import org.tensorflow.Tensors;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

public class LabelImage
{

   private static List<String> labels = loadLabels();
   private static byte[] graphDef = loadBytes("graph.pb");
   //  private static volatile boolean reloaded = false;

   public String labelImage(String fileName, byte[] bytes) throws Exception
   {
      //	graalVmHack();
//      final List<String> labels = loadLabels();
      try (Graph graph = new Graph(); Session session = new Session(graph))
      {
         graph.importGraphDef(graphDef);

         float[] probabilities = null;
         try (Tensor<String> input = Tensors.create(bytes);
               Tensor<Float> output = session.runner().feed("encoded_image_bytes", input).fetch("probabilities").run()
                     .get(0).expect(Float.class))
         {
            if (probabilities == null)
            {
               probabilities = new float[(int) output.shape()[0]];
            }
            output.copyTo(probabilities);
            int label = argmax(probabilities);
            return String.format("%-30s --> %-15s (%.2f%% likely)\n", fileName, labels.get(label),
                  probabilities[label] * 100.0);
         }

      }
   }

   //  private void graalVmHack() throws Exception {
   //	  if (reloaded) return;
   //	  Method tfInit = Class.forName("org.tensorflow.TensorFlow").getDeclaredMethod("init");
   //      tfInit.setAccessible(true);
   //      tfInit.invoke(null);
   //      reloaded = true;
   //  }

   private static byte[] loadBytes(String resource)
   {
      System.out.println("Load bytes: " + resource);
      try (InputStream is = LabelImage.class.getClassLoader().getResourceAsStream(resource))
      {
         return ByteStreams.toByteArray(is);
      }
      catch (Exception e)
      {
         throw new RuntimeException(e);
      }
   }

   private static ArrayList<String> loadLabels()
   {
      try
      {
         ArrayList<String> labels = new ArrayList<String>();
         String line;
         final InputStream is = LabelImage.class.getClassLoader().getResourceAsStream("labels.txt");
         try (BufferedReader reader = new BufferedReader(new InputStreamReader(is)))
         {
            while ((line = reader.readLine()) != null)
            {
               labels.add(line);
            }
         }
         return labels;
      }
      catch (Exception e)
      {
         throw new RuntimeException(e);
      }
   }

   private int argmax(float[] probabilities)
   {
      int best = 0;
      for (int i = 1; i < probabilities.length; ++i)
      {
         if (probabilities[i] > probabilities[best])
         {
            best = i;
         }
      }
      return best;
   }

}
